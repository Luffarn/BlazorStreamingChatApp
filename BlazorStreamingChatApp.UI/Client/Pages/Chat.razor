@page "/chat/{Id:guid}"

@using BlazorStreamingChatApp.Core.Chat.Entities
@using BlazorStreamingChatApp.UI.Client.Components
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient Http

<h1 @bind="headingStyle">
    Connected
</h1>
<div class="chat-room container">
    @foreach (var user in _chatRoom?.Users ?? new List<ChatUser>())
    {
        <UserStream User="@user" />
    }
</div>

@code {
    private HubConnection hubConnection;

    [Parameter]
    public Guid Id { get; set; }

    public ChatRoom _chatRoom { get; set; }

    private string headingStyle
                => IsConnected ? "display: block" : "display: none";

    protected override async Task OnInitializedAsync()
    {
        _chatRoom = await Http.GetFromJsonAsync<ChatRoom>($"chat?id={Id}");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatUser>("UserConnected", async (user) =>
        {
            _chatRoom = await Http.GetFromJsonAsync<ChatRoom>($"chat?id={Id}");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _chatRoom = await Http.GetFromJsonAsync<ChatRoom>($"chat?id={Id}");
        StateHasChanged();
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
